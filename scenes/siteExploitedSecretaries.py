import re
import scrapy
from tpdb.BaseSceneScraper import BaseSceneScraper


class SiteExploitedSecretariesSpider(BaseSceneScraper):
    name = 'ExploitedSecretaries'
    network = 'Exploited Secretaries'
    parent = 'Exploited Secretaries'
    site = 'Exploited Secretaries'

    start_urls = [
        'https://exploitedsecretaries.com',
    ]

    selector_map = {
        'title': '//h2/text()',
        'description': '//div[@class="wpb_wrapper"]/p[1]/text()',
        'date': '//script[contains(text(), "datePublished")]/text()',
        're_date': r'datePublished.*?(\d{4}-\d{2}-\d{2})',
        'image': '//meta[@property="og:image"]/@content|//meta[@name="twitter:image"]/@content',
        'performers': '//h3[contains(text(), "Model Details")]/following-sibling::div[1]/ul/div/li/strong[contains(text(), "Name")]/following-sibling::text()',
        'tags': '',
        'duration': '',
        'trailer': '//script[contains(text(), "videoSource")]/text()',
        're_trailer': r'videoSource.*?(http.*?\.mp4)',
        'external_id': r'.*/(.*?)/$',
        'pagination': '/videos/?page=%s',
        'type': 'Scene',
    }

    def get_scenes(self, response):
        meta = response.meta
        scenes = response.xpath('//div[contains(@class,"animated-block")]/div/a/@href').getall()
        for scene in scenes:
            if re.search(self.get_selector_map('external_id'), scene):
                yield scrapy.Request(url=self.format_link(response, scene), callback=self.parse_scene, meta=meta)
